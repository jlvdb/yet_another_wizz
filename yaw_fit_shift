#!/usr/bin/env python3
import argparse
import os

import numpy as np
from scipy.optimize import curve_fit
from yaw_tools.fitting import bias_model, model_from_n_z
from yaw_tools.folders import (DEFAULT_EXT_BOOT, DEFAULT_EXT_COV,
                               DEFAULT_EXT_DATA, CCFolder, find_cc_scales,
                               init_input_folder, init_output_folder)

from Nz_Fitting import BinnedRedshiftData, PowerLawBias, RedshiftData


# m = model_from_n_z(z_true, y_true)
# fit = lambda bins, *params: params[1] * m.rebin(bins - params[0])
# popt, pcov = curve_fit(fit, bins_meas, y_meas, sigma=err_meas, p0=[0.0, 1.0])
# perr = np.sqrt(np.diag(pcov))


parser = argparse.ArgumentParser(
    description='SURPRISE!')
parser.add_argument(
    'wdir', metavar='DATAFOLDER',
    help='an output folder of yet_another_wizz')
parser.add_argument(
    '--fit-bias', action='store_true',
    help='correct the cross-correlation measurements by fitting a bias model '
         'prior to fitting the shift relative to the redshift model')
parser.add_argument(
    '--master-key',
    help='redshift keys (e.g. 0.101z1.201) that identifies the measurement '
         'on the full data sample (only used, if bias is fitted)')
parser.add_argument(
    '--use-cov', action='store_true',
    help='use data correlation matrices for the parameter estimation if they '
         'exist')
parser.add_argument(
    '--store-cov', action='store_true',
    help='save covariance matrices in separate files')
parser.add_argument(
    '--store-boot', action='store_true',
    help='save the parameter bootstrap realisations in separate files')
parser.add_argument(
    '-o', '--output',
    help='folder in which the output is stored (optional)')


if __name__ == "__main__":

    args = parser.parse_args()
    if args.fit_bias and args.master_key is None:
        parser.error("--master-key is required with --fit-bias")
    elif not args.fit_bias:
        args.master_key = None
    indir = init_input_folder(args)
    outidr = init_output_folder(args, indir)
    scales = find_cc_scales(indir)

    # output_types = ["redshift distributions"]
    # if args.store_boot:
    #     output_types.append("bootstrap samples")
    # if args.store_cov:
    #     output_types.append("covariance matrices")
    #     if args.cov_order is not None:
    #         output_types.append("global covariance")
    # print("producing output: %s" % ", ".join(output_types))

    # fit the clustering code output
    for scale, scaledir in indir.iter_scales():
        print("==> processing scale: %s" % scale)

        # check which cross-correlation data files exist
        cc_data = scaledir.list_crosscorr_files(DEFAULT_EXT_DATA)
        if len(cc_data) == 0:
            raise ValueError("no cross-correlation data files found")
        # check which cross-correlation bootstrap files exist
        cc_boot = scaledir.list_crosscorr_files(DEFAULT_EXT_BOOT)
        if len(cc_data) == 0:
            raise ValueError("no cross-correlation bootstraps found")
        # check the covariance matrices
        raise NotImplementedError

        # check if the master key exists
        if args.master_key is not None:
            if args.master_key not in cc_data:
