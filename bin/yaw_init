#!/usr/bin/env python3
import argparse
from os.path import expanduser

import numpy as np

from yet_another_wizz.infrastructure import ProjectDirectory
from yet_another_wizz.core.config import Configuration


parser = argparse.ArgumentParser(
    description="TODO")
parser.add_argument(
    "wdir", help="project directory, must not exist")
parser.add_argument(
    "--threads", type=int,
    help="default number of threads to use if not specified (default: all)")
parser.add_argument(
    "--backend", choices=("scipy", "treecorr"), default="scipy",
    help="backend used for pair counting (default: %(default)s)")

group_scales = parser.add_argument_group(
    title="measurement scales",
    description="sets the physical scales for the correlation measurements")
group_scales.add_argument(
    "--r-min", default=100, type=int, nargs="*",
    help="(list of) lower scale cut in kpc (pyhsical, default: %(default)s)")
group_scales.add_argument(
    "--r-max", default=1000, type=int, nargs="*",
    help="(list of) upper scale cut in kpc (pyhsical, default: %(default)s)")
group_scales.add_argument(
    "--weight-scale", type=float,
    help="weight galaxy pairs by [separation]**[weight_scale] "
         "(default: no weight)")
group_scales.add_argument(
    "--resolution", type=float,
    help="radial resolution (number of log bins) to compute separation weights "
         "for galaxy pairs (default: %(default)s")

group_bins = parser.add_argument_group(
    title="redshift binning",
    description="sets the redshift binning for the clustering redshifts")
group_bins.add_argument(
    "--z-min", default=0.01, type=float,
    help="lower redshift limit (default: %(default)s)")
group_bins.add_argument(
    "--z-min", default=3.0, type=float,
    help="upper redshift limit (default: %(default)s)")
group_bins.add_argument(
    "--z-bins", default=30, type=int,
    help="number of redshift bins (default: %(default)s)")
group_bins.add_argument(
    "--z-method", default="linear", choices=("linear", "comoving", "logspace"),
    help="number of redshift bins (default: %(default)s), 'logspace' means "
         "equal size in log(1+z)")

group_backend = parser.add_argument_group(
    title="backend specific",
    description="parameters that are specific to pair counting backends")
group_backend.add_argument(
    "--rbin-slop", type=float,
    help="treecorr 'rbin_slop' parameter (treecorr backend only), note that "
         "there is only a single radial bin if --resolutoin is not specified")
group_backend.add_argument(
    "--no-cross", action="store_true",
    help="disable counting pairs across patch boundaries (scipy backend only)")


if __name__ == "__main__":

    args = parser.parse_args()

    config = Configuration(
        rmin=args.r_min, rmax=args.r_max,
        weight_scale=args.weight_scale, resolution=args.resolution,
        zmin=args.z_min, zmax=args.z_max, nbins=args.z_bins,
        method=args.z_method,
        num_threads=args.threads, crosspatch=(not args.no_cross))

    # create the project directory
    root = ProjectDirectory(expanduser(args.wdir)).expanduser()
    if root.exists():
        raise FileExistsError(f"project directory already exists: {str(root)}")

    # save configuration
    np.savetxt(root.binning_file, config.zbins)
    config.to_yaml(root.config_file)

    # create placeholder files and directories
    root.inputs_file.touch()
    root.cache_dir.mkdir()
    root.counts_dir.mkdir()
    root.estimate_dir.mkdir()
