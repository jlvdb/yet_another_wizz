#!/usr/bin/env python3
import argparse
import os
# disable threading in numpy
os.environ["OMP_NUM_THREADS"] = "1"
os.environ['OPENBLAS_NUM_THREADS'] = '1'
os.environ['MKL_NUM_THREADS'] = '1'

import numpy as np
from Nz_Fitting import (CombModelBinned, CurveFit, GaussianComb, PowerLawBias,
                        RedshiftData, RedshiftDataBinned)
from yaw_tools.folders import (DEFAULT_EXT_DATA, find_cc_scales,
                               init_input_folder, init_output_folder)
from yaw_tools.utils import (guess_bin_order, write_fit_stats,
                             write_global_cov, write_nz_data, write_parameters)
from yet_another_wizz.utils import load_json


parser = argparse.ArgumentParser(
    description='SURPRISE!')
parser.add_argument(
    'wdir', metavar='DATAFOLDER',
    help='an output folder of yet_another_wizz')
parser.add_argument(
    '--n-comp', type=int, required=True,
    help='number of Gaussian components for each bin')
parser.add_argument(
    '--fit-bias', action='store_true',
    help='additinally try to fit the galaxy bias')
parser.add_argument(
    '--cov-type', default="global", choices=RedshiftDataBinned._covmat_types,
    help='way in which the covariance information is used')
parser.add_argument(
    '-o', '--output',
    help='folder in which the output is stored (optional)')


if __name__ == "__main__":

    args = parser.parse_args()
    indir = init_input_folder(args)
    outdir = init_output_folder(args, indir)
    scales = find_cc_scales(indir)

    for scale, scaledir in indir.iter_scales():
        print("==> processing scale: %s" % scale)

        # check which cross-correlation data files exist
        cc_data = scaledir.list_crosscorr_files(DEFAULT_EXT_DATA)
        if len(cc_data) == 0:
            raise ValueError("no cross-correlation data files found")

        # figure out the bin order
        order_file = scaledir.path_bin_order_file()
        if os.path.exists(order_file):
            bin_order = []
            with open(order_file) as f:
                for line in f.readlines():
                    zbin = line.strip("\n")
                    if len(zbin) > 0:
                        bin_order.append(zbin)
        else:
            bin_order = guess_bin_order(cc_data.keys())

        # load the bin weights
        weight_file = scaledir.path_weights_file()
        if not os.path.exists(weight_file):
            raise OSError("bin weights file not found")
        weight_dict = load_json(weight_file)
        # sort and normalize the weights
        weights = np.fromiter(
            (weight_dict[zbin] for zbin in bin_order[:-1]), dtype=np.float32)
        weights /= weight_dict[bin_order[-1]]

        # load the data
        bins_data = []
        bins_model = []
        for zbin in bin_order:
            data_path = os.path.splitext(cc_data[zbin])[0]
            bins_data.append(RedshiftData.read(data_path))
            # construct models for each bin
            zmin, zmax = 0.07, 1.41  # redshift range of mocks
            bins_model.append(
                GaussianComb(args.n_comp, zmin, (zmax - zmin) / args.n_comp)
                for i in range(len(bins_data)))
        master_data = bins_data.pop()
        master_model = bins_model.pop()
        # create a joint data container (automatically computes global covar.)
        joint_data = RedshiftDataBinned(bins_data, master_data)

        # construct the fit model
        if args.fit_bias:
            bias = PowerLawBias()
        else:
            bias = None
        fit_model = CombModelBinned(bins_model, weights, bias=bias)

        # fit the bias model
        joint_data.setCovMatType(args.cov_type)
        optimizer = CurveFit(joint_data, fit_model)
        fitparams = optimizer.optimize(max_nfev=fit_model.getParamNo() * 1000)
        print(fitparams)
        paramdir = outdir[scale].join("comb_parameters")
        print("writing fit parameters to: %s/" % os.path.basename(paramdir))
        write_fit_stats(fitparams, paramdir, precision=3, notation="decimal")
        write_parameters(fitparams, paramdir, precision=3, notation="exp")

        # evaluate the best fit result
        comb_fit_data = fit_model.evaluate(
            [np.linspace(0.0, zmax, 200)] * 6, fitparams)

        # write the shifted redshift histograms
        N = args.n_comp
        header = "col 1 = mean redshift\n"
        header += "col 2 = comb fit (%d components)\n" % N
        header += "col 3 = error"
        print("writing n(z) statistics to: stats/")
        for i, data in enumerate(comb_fit_data.iterData()):
            write_nz_data(
                outdir[scale].path_combfit_file("", zbin), data,
                hdata=header,
                hboot="comb fit realisations (%d components)\n" % N,
                hcov="comb fit (%d components) covariance matrix" % N,
                stats=True)

        # store global covariance matrix
        header = "global comb fit (%d components) " % N
        header += "covariance matrix"
        write_global_cov(
            outdir[scale], comb_fit_data, bin_order, header, "combfit")
