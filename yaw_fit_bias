#!/usr/bin/env python3
import argparse
import os
import pickle

import numpy as np
from yaw_tools.fitting import fit_bias, nz_model
from yaw_tools.folders import (DEFAULT_EXT_BOOT, DEFAULT_EXT_COV,
                               DEFAULT_EXT_DATA, CCFolder, find_cc_scales,
                               init_input_folder, init_output_folder)

from Nz_Fitting import RedshiftData, BinnedRedshiftData


parser = argparse.ArgumentParser(
    description='Estimate the cross-correlation bias by fitting the weighted '
                'sum of redshift bins to the full data sample.')
parser.add_argument(
    'wdir', metavar='DATAFOLDER',
    help='an output folder of yet_another_wizz')
parser.add_argument(
    '--master-key', required=True,
    help='redshift keys (e.g. 0.101z1.201) that identifies the measurement '
         'on the full data sample (only used, if bias is fitted)')
parser.add_argument(
    '--use-cov', action='store_true',
    help='use the covariance matrix instead of the standard errors')
parser.add_argument(
    '-o', '--output',
    help='folder in which the output is stored (optional)')


if __name__ == "__main__":
    from matplotlib import pyplot as plt

    args = parser.parse_args()
    indir = init_input_folder(args)
    outdir = init_output_folder(args, indir)
    scales = find_cc_scales(indir)

    # fit the redshift bias
    for scale, scaledir in indir.iter_scales():
        print("==> processing scale: %s" % scale)

        # check which cross-correlation data files exist
        cc_data = scaledir.list_crosscorr_files(DEFAULT_EXT_DATA)
        if len(cc_data) == 0:
            raise ValueError("no cross-correlation data files found")
        elif args.master_key not in cc_data:
            raise KeyError("master key '%s' data not found" % args.master_key)
        # check which cross-correlation bootstrap files exist
        cc_boot = scaledir.list_crosscorr_files(DEFAULT_EXT_BOOT)
        if len(cc_data) == 0:
            raise ValueError("no cross-correlation bootstraps found")
        if cc_data.keys() != cc_boot.keys():
            raise KeyError(
                "redshift bins of bootstraps do not match data files")
        # check the covariance matrices
        if args.use_cov:
            cc_cov = scaledir.list_crosscorr_files(DEFAULT_EXT_COV)
            if len(cc_data) == 0:
                raise ValueError(
                    "no cross-correlation covariance matrices found")
            elif args.master_key not in cc_cov:
                raise KeyError(
                    "master key '%s' covariance matrix not found" %
                    args.master_key)
        else:
            cc_cov = None

        # load the bin weights
        weight_file = scaledir.path_weights_file()
        if not os.path.exists(weight_file):
            raise OSError("bin weights file not found")
        with open(weight_file, "rb") as f:
            weight_dict = pickle.load(f)
        # normalize the weights
        weight_dict.pop(args.master_key)
        norm = sum(weight_dict.values())
        for zbin, weight in weight_dict.items():
            weight_dict[zbin] = weight / norm

        # load the data files
        master_sample = None
        bin_samples = {}
        for zbin, path in cc_data.items():
            data = RedshiftData(*np.loadtxt(path).T)
            if zbin == args.master_key:
                master_sample = data
                if cc_cov is not None:
                    cov = np.loadtxt(cc_cov[args.master_key])
                    data.setCovariance(cov)
            else:
                bin_samples[zbin] = data
        # fit the bias for the fiducial data
        alpha_fid = fit_bias(bin_samples, master_sample, weight_dict)[0][0]

        # load the bootstrap realisations
        boot_arrays = {}
        n_bootstraps = None
        for zbin, path in cc_boot.items():
            boot_arrays[zbin] = np.loadtxt(path)
            if n_bootstraps is None:
                n_bootstraps = len(boot_arrays[zbin])
            else:
                if n_bootstraps != len(boot_arrays[zbin]):
                    raise IndexError(
                        "number of bootstrap realisation do not match")

        # fit the bias for the bootstrap realisations
        alphas = np.empty(n_bootstraps)
        for i in range(n_bootstraps):
            # update the data
            for zbin in boot_arrays:
                data = boot_arrays[zbin][i]
                if zbin == args.master_key:
                    master_sample.n = data
                else:
                    bin_samples[zbin].n = data
            data_container = BinnedRedshiftData(
                [bin_samples[zbin] for zbin in sorted(bin_samples.keys())],
                master_sample)
            alphas[i] = fit_bias(bin_samples, master_sample, weight_dict)[0][0]
        
        print("alpha = %+.3fÂ±%.3f" % (alpha_fid, alphas.std()))
